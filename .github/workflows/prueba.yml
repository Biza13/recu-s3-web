name: Prueba

#evento para que se deployee cuando se hace el push
#on:
#  push:   #evento a hacer en este caso cuando hagamos un push
#    branches:   #en la rama main
#      - main

#Este evento es para que solo se deployee si se lo digo manualmente
on:
 workflow_dispatch:

jobs:
#job para desplegar infraestructura de terraform
  despliegue:   
    runs-on: ubuntu-latest
      
    steps:   
      - name: Checkout  
        uses: actions/checkout@v4  
      
      - name: Configurar credenciales aws
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: "us-east-1" 
          
      #este paso es para instalar terraform en la maquina virtual
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform init
        id: init
        run: terraform init
        working-directory: ./archivos-tf
       
      - name: Plan Terraform
        run: terraform plan
        working-directory: ./archivos-tf
  
      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ./archivos-tf

      #agregamos el backend al archivo .tf  
      - name: Agregar backend al archivo Terraform
        run: |
          echo 'terraform {
            backend "s3" {
              bucket         = "cubo-s3-begona"
              key            = "terraform.tfstate"
              region         = "us-east-1"
              dynamodb_table = "tfstate-bloqueo"
              encrypt        = true
            }
          }' >> ./archivos-tf/s3-dynamoTable.tf  

      #Inicializar Terraform con el backend y migrar el estado
      - name: Inicializar Terraform con backend
        run: |
          terraform init -migrate-state -input=false
        working-directory: ./archivos-tf

  #segundo job bucket como servidor y subir la pagina al bucket      
  SubirPaginaEstatica: 
    needs: despliegue
    runs-on: ubuntu-latest
    steps: 
    
      - name: Checking out code
        uses: actions/checkout@v4
        
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: "us-east-1"

      #He de deshabilitar el bloqueo de acceso publico sino no puedo habilitar el hosting
      - name: Deshabilitar bloqueo de acceso público temporalmente
        run: |
         aws s3api put-public-access-block \
         --bucket ${{ secrets.AWS_S3_BUCKET }} \
         --public-access-block-configuration '{
          "BlockPublicAcls": false,
          "IgnorePublicAcls": false,
          "BlockPublicPolicy": false,
          "RestrictPublicBuckets": false
         }'

      - name: Habilitar el hosting de página web estática
        run: |
          aws s3 website s3://${{ secrets.AWS_S3_BUCKET }} --index-document index.html --error-document 404.html

      - name: Configurar la política de acceso público
        run: |
          aws s3api put-bucket-policy --bucket ${{ secrets.AWS_S3_BUCKET }} --policy '{
            "Version": "2012-10-17",
            "Statement": [
              {
                "Sid": "PublicReadGetObject",
                "Effect": "Allow",
                "Principal": "*",
                "Action": [
                "s3:GetObject"
                ],
                "Resource": [
                "arn:aws:s3:::${{ secrets.AWS_S3_BUCKET }}/*"
                ]
              }
            ]
          }'

      - name: Subir a S3 bucket el index
        run: aws s3 cp ./Pagina-Ia-Susana/index.html s3://${{ secrets.AWS_S3_BUCKET }}/index.html    

      - name: Subir a S3 bucket la carpeta assets 
        run: aws s3 sync ./Pagina-Ia-Susana/assets s3://${{ secrets.AWS_S3_BUCKET }}/assets
